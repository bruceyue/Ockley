<!--
Ockley 1.0
Copyright 2011,  Matthew Page
licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<div>
    <span id="toolbar" class="ui-widget-header ui-corner-all" >
        <button id="save">Save</button>
        <button id="undo">Undo</button>
        <button id="redo">Redo</button>
        <button id="find">Find</button>
    </span>
</div>
<div id="sidebar" class="ui-widget ui-widget-content ui-corner-all">
    <div id="accordion">
	    <h3 id="apexHeader"><a href="#">Apex</a></h3>
        <div id="apexContent">
            <p>loading...</p>
        </div>
        <h3 id="vfHeader"><a href="#">Visualforce</a></h3>
        <div id="vfContent">
            <p>loading...</p>
        </div>
    </div>
</div>
        
<div id="tabs">
    <ul>
		<li><a href="#tabs-new">+</a></li>
	</ul>
	<div id="tabs-new">
	</div>
</div>

<div id='messageDialog' style='display:none'>
    <p></p>
</div>

<div id="findDialog" style='display:none'>
    <ul>
        <li><span>Find:&nbsp;</span><input id='findText' type='text' /></li>
        <li><input id='caseSensitive' type='checkbox'>Case Sensitive</input></li>
        <li><input id='regex' type='checkbox'>Regex</input></li>
    </ul>
</div>

<div id='themesContainer' style="display:none" >
     <select id='themes'>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/smoothness/jquery-ui.css'>Smoothness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/cupertino/jquery-ui.css'>Cupertino</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/ui-lightness/jquery-ui.css'>Lightness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/ui-darkness/jquery-ui.css'>Darkness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/redmond/jquery-ui.css'>Redmond</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/start/jquery-ui.css'>Start</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/sunny/jquery-ui.css'>Sunny</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/overcast/jquery-ui.css'>Overcast</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/le-frog/jquery-ui.css'>Le Frog</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/flick/jquery-ui.css'>Flick</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/pepper-grinder/jquery-ui.css'>Pepper Grinder</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/eggplant/jquery-ui.css'>Eggplant</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/dark-hive/jquery-ui.css'>Dark Hive</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/south-street/jquery-ui.css'>South Street</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/blitzer/jquery-ui.css'>Blitzer</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/humanity/jquery-ui.css'>Humanity</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/hot-sneaks/jquery-ui.css'>Hot Sneaks</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/trontastic/jquery-ui.css'>Trontastic</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/vader/jquery-ui.css'>Vader</option>
     </select>
 </div>


<script>

    jQuery(function(){

        var $t = $("#tabs");

        //maximize the tab height
        var wh = $(window).height();
        var fudge = wh * 0.1;
        $t.height(wh - $t.offset().top - fudge);

        var tabs = new EditorTabs( $t );
        tabs.createNew();
        tabs.refresh(true);

        $t.resizable({
            helper: "ui-resizable-helper",
            stop: function(event, ui) {
                tabs.refresh(true);
            }
        });

        //set the sidebar height equal to the height of the tab set
        $("#sidebar").height($t.outerHeight());

        var messageDialog = new MessageDialog('#messageDialog');

        //create the find dialog
        var findDialog = new FindDialog({
            dialogElemSelector: '#findDialog',
            findTextSelector: '#findText',
            foundTextClassName: 'foundText',
            caseSensitiveSelector: '#caseSensitive',
            getEditor: function(){ return tabs.getEditor(); }
        });

        //create the document accordion
        var accordion = new DocAccordion("#accordion", {
            documentClicked: onDocumentClicked
        });

        //get a listing of Apex classes and add to the accordion
        getDocList('/apex.json', 'ApexClass', function(docs){
            accordion.appendDocuments("Apex", docs);
        });

        //get a listing of Apex pages and add to the accordion
        getDocList('/vf.json', 'ApexPage',function(docs){
            accordion.appendDocuments("Visualforce", docs);
        });

        //configure toolbar buttons
        var buttons = [
            {
                selector: '#save',
                icon: "silk-icon-save",
                onClick: onDocumentSave
            },
            {
                selector: '#undo',
                icon: "silk-icon-undo",
                onClick: function(){
                    var editor = tabs.getEditor();
                    if (editor != null){
                        editor.undo();
                    }
                }
            },
            {
                selector: '#redo',
                icon: 'silk-icon-redo',
                onClick: function(){
                    var editor = tabs.getEditor();
                    if (editor != null){
                        editor.redo();
                    }
                }
            },
            {
                selector: '#find',
                icon: 'silk-icon-find',
                onClick: function(){
                    var editor = tabs.getEditor();
                    if (editor != null){
                        var selection = $.trim(editor.getSelection());
                        findDialog.show(selection);
                    }
                }
            }
        ];

        //now create the toolbar
        var toolbar = new Toolbar("#toolbar", buttons);

        //move the themes container to the bottom of the page
        var themesContainer = $('#themesContainer');
        $('footer').append(themesContainer.detach());
        themesContainer.show();

        //handle theme selection
        var themes = themesContainer.find('#themes');
        themes.change(function(){
            var themeLink = $('head').find('link[href*=jquery-ui]');
            themeLink.attr('href', $(this).val());

            //store the theme name in a cookie
            $.cookie("ockley_theme", $(this).find('option:selected').first().text());
        });

        //if there is a cookie with a selected theme, restore that theme
        var selectedTheme = $.cookie('ockley_theme');
        if(selectedTheme){
            var option = themes.find('option:contains(' + selectedTheme + ')');
            themes.val(option.val()).trigger('change');
        }

        function getDocList(url, type, callback){
            if (url && type){
                $.getJSON(url, function(data) {
                    if (data && data.records){
                        var docs = [];
                        $.each(data.records, function(index, doc){
                           if (doc.attributes && doc.attributes.type == type){
                               docs.push({ id: doc.Id, name: doc.Name });
                           }
                        });
                        if ($.isFunction(callback)){
                            callback.call(this, docs);
                        }
                    }
                });
            }
        }

        function getErrorMsg(err){

            if (typeof err == 'string'){
                err = JSON.parse(err);
            }

            if ($.isArray(err) && err.length > 0){
                err = err[0];
            }

            var msg = 'Failed to receive result from request';

            if (err.message){
                msg = err.message;
            }
            if (err.problem){
                msg = err.problem.text;
            }
            if (err.errors && err.errors.message){
                msg = err.errors.message.text;
            }
            if (err.line){
                msg += ' line: ' + err.line.text;
            }
            if (err.column){
                msg += ' column: ' + err.column.text;
            }

            return msg;
        }

        function saveDocument(url, msg, content){
            messageDialog.show(msg);

            $.post(url, { 'content': content }, function(data) {

                log('Compile/Save result: ');
                log(data);
                if (typeof data == 'string' && data == 'Success'){
                    messageDialog.hide();
                    return;
                }
                else if ($.isArray(data) && data.length > 0){
                    data = data[0];
                    if (data.hasOwnProperty('success')){
                        if (data.success.text === 'true'){
                            messageDialog.hide();
                            return;
                        }
                    }
                }

                messageDialog.setMessage(getErrorMsg(data)).showOk(true);
            });
        }

        function onDocumentSave(){
            var tabId = tabs.getSelected();
            var docId = tabs.getData(tabId, 'docId');
            var lastModified = tabs.getData(tabId, 'lastModified');
            var headerTitle = tabs.getData(tabId, 'headerTitle');
            var url = null;
            var postUrl = null;
            var action = "Compiling...";

            if (headerTitle === "Apex"){
                url = '/apex/lastmodified/' + docId + '.json';
                postUrl = '/apex/'+ docId+'.json';
            }
            else if (headerTitle === "Visualforce"){
                url = '/vf/lastmodified/' + docId+'.json';
                postUrl = '/vf/'+ docId+'.json';
                action = "Saving...";
            }

            if (url != null){

                //get the lastmodified date for the document
                //if it appears to be newer than the last save, warn the user
                $.getJSON(url, function(data){
                    var now = sfDateToJsDate(lastModified);
                    var then = sfDateToJsDate(data.LastModifiedDate);
                    var postIt = false;
                    if (now < then){
                        postIt = confirm('It looks like the document you are attempting to save/compile is older than what is in the Org. Are you sure you want to continue and overwrite any changes?');
                    }
                    else{
                        postIt = true;
                    }

                    if (postIt){
                        saveDocument(postUrl, action, tabs.getEditor(tabId).getValue());
                    }
                });
            }
        }

        function onDocumentClicked(headerTitle, link){
            var docId = link.attr('id');

            //if it's already open, just activate the tab
            var existing = tabs.findByData('docId', docId);
            if (existing.size() > 0){
                tabs.setSelected(existing[0]);
                return;
            }

            var url = null;
            var contentKey = null;
            var editMode = 'apex';

            if (headerTitle === "Apex"){
                url = '/apex/'+ docId+'.json';
                contentKey = 'Body';
            }
            else if (headerTitle === "Visualforce"){
                url = '/vf/'+ docId+'.json';
                contentKey = 'Markup';
                editMode = 'text/html';
            }

            if (url && contentKey){
                //fetch the document and open it in a new tab
                $.getJSON(url, function(data) {
                    //log(JSON.stringify(data));
                    if (data && data.records && data.records.length > 0){
                        var record = data.records[0];
                        var lastModified = record.LastModifiedDate;
                        var content = record[contentKey];
                        if (content){
                            tabs.createNew({
                                title: link.text(),
                                text: content,
                                data: { 'docId': docId, 'headerTitle': headerTitle, 'lastModified' : lastModified },
                                'mode': editMode
                            });
                        }
                    }

                });
            }
        }


    });
</script>        