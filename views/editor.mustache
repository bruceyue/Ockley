<!--
Ockley 1.0
Copyright 2011,  Matthew Page
licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<div id="toolbar" class="ui-widget-header ui-corner-all" >
    <button id="new">New</button>
    <button id="save">Save</button>
    <button id="undo">Undo</button>
    <button id="redo">Redo</button>
    <button id="find">Find</button>
</div>
<div id="sidebar" class="ui-widget ui-widget-content ui-corner-all">
    <div id="accordion">
	    <h3 id="apexHeader"><a href="#">Apex</a></h3>
        <div id="apexContent">
            <p>loading...</p>
        </div>
        <h3 id="vfHeader"><a href="#">Visualforce</a></h3>
        <div id="vfContent">
            <p>loading...</p>
        </div>
    </div>
</div>
        
<div id="tabs">
    <ul>
		<li><a href="#tabs-new">+</a></li>
	</ul>
	<div id="tabs-new">
	</div>
</div>

<div id='themesContainer' >
     <select id='themes'>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/smoothness/jquery-ui.css'>Smoothness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/cupertino/jquery-ui.css'>Cupertino</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/ui-lightness/jquery-ui.css'>Lightness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/ui-darkness/jquery-ui.css'>Darkness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/redmond/jquery-ui.css'>Redmond</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/start/jquery-ui.css'>Start</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/sunny/jquery-ui.css'>Sunny</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/overcast/jquery-ui.css'>Overcast</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/le-frog/jquery-ui.css'>Le Frog</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/flick/jquery-ui.css'>Flick</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/pepper-grinder/jquery-ui.css'>Pepper Grinder</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/eggplant/jquery-ui.css'>Eggplant</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/dark-hive/jquery-ui.css'>Dark Hive</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/south-street/jquery-ui.css'>South Street</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/blitzer/jquery-ui.css'>Blitzer</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/humanity/jquery-ui.css'>Humanity</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/hot-sneaks/jquery-ui.css'>Hot Sneaks</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/trontastic/jquery-ui.css'>Trontastic</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/vader/jquery-ui.css'>Vader</option>
     </select>
</div>


<div id='messageDialog' style='display:none'>
    <p></p>
</div>

<div id="findDialog" style='display:none'>
    <ul>
        <li><span>Find:&nbsp;</span><input id='findText' type='text' /></li>
        <li><input id='caseSensitive' type='checkbox'>Case Sensitive</input></li>
        <li><input id='regex' type='checkbox'>Regex</input></li>
    </ul>
</div>

<div id="newDialog" style='display: none'>
    <p>What type of document do you want to create?</p>
    <ul>
        <li><input id="radio1" type="radio" name="newDoc" value="apex" checked='true' /><label for="radio1">Apex</label></li>
        <li><input id="radio2" type="radio" name="newDoc" value="vf" /><label for="radio2">Visualforce</label></li>
        <!--<li><input id="radio3" type="radio" name="newDoc" value="res" /><label for="radio3">Static Resource</label></li>-->

    </ul>
    <br />
    <p>What do you want to call it?</p>
    <ul>
        <li><span>Name:&nbsp;</span><input id='nameText' type='text' /></li>
    </ul>
</div>

<script>

    jQuery(function(){

        var tabs = initTabs();
        var messageDialog = initMessageDialog();
        var findDialog = initFindDialog();
        var newDialog = initNewDialog();

        initSidebar();
        initDocAccordion();
        initToolbar();
        initThemes();



        function initFindDialog(){

            //create the find dialog
            return new FindDialog({
                dialogElemSelector: '#findDialog',
                findTextSelector: '#findText',
                foundTextClassName: 'foundText',
                caseSensitiveSelector: '#caseSensitive',
                getEditor: function(){ return tabs.getEditor(); }
            });
        }

        function initMessageDialog(){

            //messagedialog used when saving/compile docs
            return new MessageDialog('#messageDialog');
        }

        function initNewDialog(){
             var dialogOptions = {
                autoOpen: false,
                resizable: false,
                title: 'New',
                 buttons: {
                    "Ok" : function(){
                        var selected = $(this).find('input').filter(":checked");
                        var name = $(this).find('#nameText').val();
                        if (selected.size() > 0){
                            onDocumentNew(selected.val(), name);
                        }

                        $(this).dialog("close");
                    },
                    "Cancel" : function() { $(this).dialog("close"); }
                },
                width: 400
            };
            return $("#newDialog").dialog(dialogOptions);
        }

        function initSidebar(){
            //set the sidebar height equal to the height of the tab set
            //$("#sidebar").height($("#tabs").outerHeight());
        }

        function initDocAccordion(){

            //create the document accordion.
            var accordion = new DocAccordion("#accordion", {
                documentClicked: onAccordionDocumentClicked
            });

            //get a listing of Apex classes and add to the accordion
            getDocList('/apex.json', 'ApexClass', function(docs){
                accordion.appendDocuments("Apex", docs);
            });

            //get a listing of Apex pages and add to the accordion
            getDocList('/vf.json', 'ApexPage',function(docs){
                accordion.appendDocuments("Visualforce", docs);
            });

        }

        function initTabs(){
            var $t = $("#tabs");

            /*
            //maximize the tab height
            var wh = $(window).height();
            var fudge = wh * 0.1;
            $t.height(wh - $t.offset().top - fudge);
            */

            //create the object that manages editor tabs
            var tabs = new EditorTabs( $t );

            //create an initial empty document
            tabs.createNew();
            tabs.refresh(true);

            /*
            //we want the tabs container to be resizable
            $t.resizable({
                helper: "ui-resizable-helper",
                stop: function(event, ui) {
                    tabs.refresh(true);
                }
            });
            */
            return tabs;
        }

        function initToolbar(){
            //configure toolbar buttons
            var buttons = [
                {
                    selector: '#new',
                    icon: 'silk-icon-new',
                    onClick: function(){ newDialog.dialog('open'); }
                },
                {
                    selector: '#save',
                    icon: "silk-icon-save",
                    onClick: onDocumentSave
                },
                {
                    selector: '#undo',
                    icon: "silk-icon-undo",
                    onClick: function(){
                        var editor = tabs.getEditor();
                        if (editor != null){
                            editor.undo();
                        }
                    }
                },
                {
                    selector: '#redo',
                    icon: 'silk-icon-redo',
                    onClick: function(){
                        var editor = tabs.getEditor();
                        if (editor != null){
                            editor.redo();
                        }
                    }
                },
                {
                    selector: '#find',
                    icon: 'silk-icon-find',
                    onClick: function(){
                        var editor = tabs.getEditor();
                        if (editor != null){
                            var selection = $.trim(editor.getSelection());
                            findDialog.show(selection);
                        }
                    }
                }
            ];

            //now create the toolbar
            var toolbar = new Toolbar("#toolbar", buttons);
        }

        function initThemes(){

            /*
            //move the themes container to the bottom of the page
            var themesContainer = $('#themesContainer');
            $('footer').append(themesContainer.detach());
            themesContainer.show();
            */

            //handle theme selection
            var themes = themesContainer.find('#themes');
            themes.change(function(){
                var themeLink = $('head').find('link[href*=jquery-ui]');
                themeLink.attr('href', $(this).val());

                //store the theme name in a cookie
                $.cookie("ockley_theme", $(this).find('option:selected').first().text());
            });

            //if there is a cookie with a selected theme, restore that theme
            var selectedTheme = $.cookie('ockley_theme');
            if(selectedTheme){
                var option = themes.find('option:contains(' + selectedTheme + ')');
                themes.val(option.val()).trigger('change');
            }
        }

        //fetch a listing of apex or vf documents
        function getDocList(url, type, callback){
            if (url && type){
                $.getJSON(url, function(data) {
                    if (data && data.records){
                        var docs = [];
                        $.each(data.records, function(index, doc){
                           if (doc.attributes && doc.attributes.type == type){
                               docs.push({ id: doc.Id, name: doc.Name });
                           }
                        });
                        if ($.isFunction(callback)){
                            callback.call(this, docs);
                        }
                    }
                });
            }
        }

        //try to build a message from the error results
        function getErrorMsg(err){

            if (typeof err == 'string'){
                err = JSON.parse(err);
            }

            if ($.isArray(err) && err.length > 0){
                err = err[0];
            }

            var msg = 'Failed to receive result from request';

            if (err.message){
                msg = err.message;
            }
            if (err.problem){
                msg = err.problem.text;
            }
            if (err.errors && err.errors.message){
                msg = err.errors.message.text;
            }
            if (err.line){
                msg += ' line: ' + err.line.text;
            }
            if (err.column){
                msg += ' column: ' + err.column.text;
            }

            return msg;
        }

        function getResult(data){
            var ret = {
                "success" : false,
                "data": data
            };

            if (typeof data == 'string' && data == 'Success'){
                ret.success = true;
            }
            else if ($.isArray(data) && data.length > 0){
                ret.success = true;
                ret.data = data = data[0];
                if (data.hasOwnProperty('success')){
                    ret.success =  (data.success.text === 'true');
                }
                if (data.hasOwnProperty('done')){
                    ret.done = (data.done.text == 'true');
                }
                if (data.hasOwnProperty('numbercomponenterrors')){
                    if (parseInt(data.numbercomponenterrors, 10) > 0){
                        ret.success = false;
                    }
                }
            }

            return ret;
        }

        //save an apex or vf document
        function saveDocument(docId, docType, content, successCallback){

            var url, msg, success;

            if (docType === "apex"){
                url = '/apex/'+ docId+'.json';
                msg = "Compiling...";
            }
            else if (docType === "vf"){
                url = '/vf/'+ docId+'.json';
                msg = "Saving...";
            }

            messageDialog.show(msg);

            $.post(url, { 'content': content }, function(data) {

                log('Compile/Save result: ');
                log(data);

                var result = getResult(data);
                if (result.success){
                    messageDialog.hide();
                    if (successCallback != null){
                        successCallback.apply(this, []);
                    }
                }else{
                    messageDialog.setMessage(getErrorMsg(data)).showOk(true);
                }
            });
        }

        //check the lastmodified date of the document and see if it is newer than
        //the lastmodified value we have. This is to ensure that someone hasn't updated a document
        //since the last time we refreshed. Prevent overwriting changes.
        function checkLastModified(docId, docType, lastModified, successCallback){
            var url;

            if (docType === "apex"){
                url = '/apex/lastmodified/' + docId + '.json';
            }
            else if (docType === "vf"){
                url = '/vf/lastmodified/' + docId+'.json';
            }

            if (url){

                //get the lastmodified date for the document
                //if it appears to be newer than the last save, warn the user
                $.getJSON(url, function(data){
                    var now = sfDateToJsDate(lastModified);
                    var then = sfDateToJsDate(data.LastModifiedDate);
                    var overwrite = false;
                    if (now < then){
                        overwrite = confirm('It looks like the document you are attempting to save/compile is older than what is in the Org. Are you sure you want to continue and overwrite any changes?');
                    }
                    else{
                        overwrite = true;
                    }

                    if (overwrite){
                        if (successCallback != null){
                            successCallback.apply(this, [then]);
                        }
                    }
                });
            }

        }

        //called when toolbar save is clicked
        function onDocumentSave(){
            var tabId = tabs.getSelected();
            var docId = tabs.getData(tabId, 'docId');
            var docType = tabs.getData(tabId, 'docType');
            var lastModified = tabs.getData(tabId, 'lastModified');
            
            checkLastModified(docId, docType, lastModified, function(){
                saveDocument(docId, docType, tabs.getEditor(tabId).getValue(), function(){
                    //update the lastmodified date to now
                    tabs.setData(tabId, 'lastModified', jsDateToSfDate(new Date()));
                });
            });
        }

        function checkDeployStatus(deployId){
            return function(){
                var url = '/deploystatus/' + deployId + '.json';

                $.getJSON(url, function(data){
                    log('deploy status: ');
                    log(data);

                    var result = getResult(data);
                    if (result.success){
                        if (!result.done){
                            setTimeout(checkDeployStatus(deployId), 2000);
                            return;
                        }
                    }
                    setTimeout(checkDeployResult(deployId), 500);
                });
            };
        }

        function checkDeployResult(deployId){
            return function(){
                var url = '/deployresult/' + deployId + '.json';

                $.getJSON(url, function(data){
                    log('deploy result: ');
                    log(data);

                    var result = getResult(data);
                    if (result.success){
                        messageDialog.hide();
                    }
                    else{
                        messageDialog.setMessage("Failed to create new document!").showOk(true);
                    }
                });
            };
        }

        function onDocumentNew(docType, docName){

            var url, msg;

            log('creating new document of type: ' + docType);
            if (docType === 'apex'){
                url = '/apex.json';
                msg = 'Deploying New Apex Class...';
            }
            else if (docType === 'vf'){
                url = '/vf.json';
                msg = 'Creating New Visualforce page...';
            }
            else if (docType === 'res'){
                //TODO - add support for creating static resources
            }
            messageDialog.show(msg);

            $.post(url, { name: docName }, function(data) {

                log('Create result: ');
                log(data);

                var result = getResult(data);
                if (result.success && result.done){
                    messageDialog.hide();
                    return;
                }
                setTimeout(checkDeployStatus(result.data.id.text), 2000);

            });

        }

        //called when a document title is clicked in the accordion.
        function onAccordionDocumentClicked(headerTitle, link){
            var docId = link.attr('id');

            //if it's already open, just activate the tab
            var existing = tabs.findByData('docId', docId);
            if (existing.size() > 0){
                tabs.setSelected(existing[0]);
                return;
            }

            var url = null;
            var contentKey = null;
            var editMode = 'apex';
            var docType = '';

            if (headerTitle === "Apex"){
                url = '/apex/'+ docId+'.json';
                contentKey = 'Body';
                docType = 'apex';
            }
            else if (headerTitle === "Visualforce"){
                url = '/vf/'+ docId+'.json';
                contentKey = 'Markup';
                editMode = 'text/html';
                docType = 'vf';
            }

            if (url && contentKey){
                //fetch the document and open it in a new tab
                $.getJSON(url, function(data) {
                    //log(JSON.stringify(data));
                    if (data && data.records && data.records.length > 0){
                        var record = data.records[0];
                        var lastModified = record.LastModifiedDate;
                        var content = record[contentKey];
                        if (content){
                            tabs.createNew({
                                title: link.text(),
                                text: content,
                                data: { 'docId': docId, 'docType': docType, 'lastModified' : lastModified },
                                'mode': editMode
                            });
                        }
                    }

                });
            }
        }


    });
</script>        