<!--
Ockley 1.0
Copyright 2011,  Matthew Page
licensed under the MIT license: http://www.opensource.org/licenses/mit-license.php
-->
<div id="toolbar" class="ui-widget-header ui-corner-all" >
    <button id="new">New</button>
    <button id="save">Save</button>
    <button id="undo">Undo</button>
    <button id="redo">Redo</button>
    <button id="find">Find</button>

    <select id='themes'>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/smoothness/jquery-ui.css'>Smoothness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/cupertino/jquery-ui.css'>Cupertino</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/ui-lightness/jquery-ui.css'>Lightness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/ui-darkness/jquery-ui.css'>Darkness</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/redmond/jquery-ui.css'>Redmond</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/start/jquery-ui.css'>Start</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/sunny/jquery-ui.css'>Sunny</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/overcast/jquery-ui.css'>Overcast</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/le-frog/jquery-ui.css'>Le Frog</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/flick/jquery-ui.css'>Flick</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/pepper-grinder/jquery-ui.css'>Pepper Grinder</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/eggplant/jquery-ui.css'>Eggplant</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/dark-hive/jquery-ui.css'>Dark Hive</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/south-street/jquery-ui.css'>South Street</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/blitzer/jquery-ui.css'>Blitzer</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/humanity/jquery-ui.css'>Humanity</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/hot-sneaks/jquery-ui.css'>Hot Sneaks</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/trontastic/jquery-ui.css'>Trontastic</option>
         <option value='//ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/vader/jquery-ui.css'>Vader</option>
     </select>

</div>
<div class="editorColumns">
    <div id="sidebar" class="ui-widget ui-widget-content ui-corner-all">
        <div id="accordion">
            <h3 id="apexHeader"><a href="#" title="Click here to view Apex documents">Apex</a></h3>
            <div id="apexContent">
                <ul id="apexDocList"></ul>

            </div>
            <h3 id="vfHeader"><a href="#" title="Click here to view Visualforce documents">Visualforce</a></h3>
            <div id="vfContent">
                <ul id="vfDocList"></ul>
            </div>
        </div>
    </div>

    <div id="tabs">
        <ul></ul>
    </div>
</div>

<div id='messageDialog' style='display:none'>
    <p></p>
</div>

<div id="findDialog" style='display:none'>
    <ul>
        <li><span>Find:&nbsp;</span><input id='findText' type='text' /></li>
        <li><input id='caseSensitive' type='checkbox'>Case Sensitive</input></li>
        <li><input id='regex' type='checkbox'>Regex</input></li>
    </ul>
</div>

<div id="newDialog" style='display: none'>
    <p>What type of document do you want to create?</p>
    <ul>
        <li><input id="radio1" type="radio" name="newDoc" value="apex" checked='true' /><label for="radio1">Apex</label></li>
        <li><input id="radio2" type="radio" name="newDoc" value="vf" /><label for="radio2">Visualforce</label></li>
        <!--<li><input id="radio3" type="radio" name="newDoc" value="res" /><label for="radio3">Static Resource</label></li>-->

    </ul>
    <br />
    <p>What do you want to call it?</p>
    <ul>
        <li><span>Name:&nbsp;</span><input id='nameText' type='text' /></li>
    </ul>
</div>

<script id="docLinkTemplate" type="text/x-jquery-tmpl">
    <a id='${id}' href='#' >${name}</a>
</script>

<script>



    jQuery(function(){


        /*----------------------------------
            Events Mgr - Custom Events
            Event Name      Source
        ------------------------------------
            tabOpen         EditorTabs
            tabClose        EditorTabs
            findOpen        FindDialog
            findClose       FindDialog
            findPrevious    FindDialog
            findNext        FindDialog
            msgOpen         MessageDialog
            msgClose        MessageDialog
            newOpen         NewDialog
            newClose        NewDialog
            newDocument     NewDialog
            new             Toolbar
            save            Toolbar
            undo            Toolbar
            redo            Toolbar
            find            Toolbar
            saving			editorView
            saved			editorView (callback from model.save)
            saveError		editorView (callback from model.save)
        ------------------------------------
        ------------------------------------
        */
        var eventsMgr = _.extend({}, Backbone.Events);

        //create the object that manages editor tabs
        var tabs = new Ockley.EditorTabs( { tabsSelector: "#tabs", 'eventsMgr': eventsMgr });

        //create the document accordion. This holds the apex class and vf page view items
        $('#accordion').accordion({
            collapsible: true,
            active: false,
            fillSpace: true
        });

        //these are the individual lists within the accordion
        var apexDocListContainer = $("#apexDocList");
        var vfDocListContainer = $("#vfDocList");
 
        //create lists of  documents (models)
        var apexDocs = new Ockley.ApexDocList();
        var vfDocs = new Ockley.VisualforceDocList();

        //bind to some important document (model) events
        //reset is called when the documents are initially loaded
        //add is called when a new document is added
        apexDocs.bind("reset", getDocEventHandler('reset', 'apex', apexDocListContainer));
        apexDocs.bind("add", getDocEventHandler('add', 'apex', apexDocListContainer));
        vfDocs.bind("reset", getDocEventHandler('reset', 'vf', vfDocListContainer));
        vfDocs.bind("add", getDocEventHandler('add', 'vf', vfDocListContainer));

        //go get the initial set of documents from the server (triggers reset event)        
        apexDocs.fetch();
        vfDocs.fetch();


        //create and render the toolbar
        var toolbar = new Ockley.Toolbar({
            el: "#toolbar",
            "buttons" : [
                { name: 'new',  selector: '#new',  icon: 'silk-icon-new'   },
                { name: 'save', selector: '#save', icon: "silk-icon-save" },
                { name: 'undo', selector: '#undo', icon: "silk-icon-undo" },
                { name: 'redo', selector: '#redo', icon: 'silk-icon-redo' },
                { name: 'find', selector: '#find', icon: 'silk-icon-find' }
            ],
            "eventsMgr" : eventsMgr
        } );
        toolbar.render();

        //create the find dialog
        var findDialog = new Ockley.FindDialog({
            dialogElemSelector: '#findDialog',
            findTextSelector: '#findText',
            caseSensitiveSelector: '#caseSensitive',
            'eventsMgr': eventsMgr
        });

        
        //create the messagedialog that is used when saving/compile docs
        var messageDialog = new Ockley.MessageDialog({
            dialogElemSelector:'#messageDialog'
        });

        var newDialog = new Ockley.NewDialog({
            dialogElemSelector: '#newDialog',
            'eventsMgr': eventsMgr
        });


        //when the newDocument event is fired by the "New Document" dialog
        //this will issue a post to the server informing it to create a new doc in the sf org.
        //the server has to create the new doc by doing a deploy (ugh)
        //so we have to check the status of the deploy and get the final result.
        //Otherwise, we could just create a new doc model and call save. Wouldn't that be nice.
        //TODO - consider pushing this logic into the document model.
        eventsMgr.bind("newDocument", function(docType, docName){

            var docList, doc, msg, url;

            switch(docType){
              case 'apex':
                docList = apexDocs;
                url = '/apex.json';
                msg =  'Deploying New Apex Class...';
                doc = new Ockley.ApexDoc({ name: docName });
              break;
              case 'vf':
                docList = vfDocs;
                url = '/vf.json';
                msg = 'Creating New Visualforce page...';
                doc = new Ockley.VisualforceDoc({ name: docName });
              break;
              default:
                throw new Error('Unexpected new document type!');
            }
            
            messageDialog.show(msg);

            var callback = {
                success: function(result){
                    messageDialog.hide();
                    if (result.data.hasOwnProperty('messages')){
                      if (result.data.messages.hasOwnProperty('id')){
                        doc.attributes.id = result.data.messages.id.text;
                      }
                    }
                    docList.add(doc);
                    doc.fetch();
                    messageDialog.hide();
                },
                error: function(result){
                   messageDialog.setMessage(Ockley.getSfErrorMsg(result)).showOk(true); 
                }
            };

            $.post(url, { name: docName }, function(data) {

                log('Create result: ');
                log(data);


                var result = Ockley.getSfResult(data);
                if (result.success && result.done){
                    callback.success.apply(this, result);
                    return;
                }

                setTimeout(checkDeployStatus(result.data.id.text, callback), 2000);
            });
        });


        //hookup handlers for some of the generated events
        eventsMgr.bind("saving", function(){ messageDialog.show('Saving…'); });
        eventsMgr.bind("saved", function(){ messageDialog.hide(); });
        eventsMgr.bind("saveError", function(result){ messageDialog.setMessage(Ockley.getSfErrorMsg(result)).showOk(true); });
        
        //setup the theme selector
        Ockley.jQueryUiThemesSelector('#themes');

        //initially there are no docs open, so we show a tip to remind the user what to do
        setTimeout(function(){
            $('#apexHeader a').miniTip({ anchor: 'e' }).trigger('mouseenter');
            $('#vfHeader a').miniTip({ anchor: 'e' });
           
            $('#miniTip').addClass('ui-accordion-header').addClass('ui-state-default');

        }, 1000);

        ////////////////////////////////////////////////////////////////////////
        // Add a new document into the entire ui. 
        //  Adds a new document accordion list item
        //  Creates a new editor view for the doc
        function addDoc(doc, docType, container){
            var view = null;
            var mode = '';
            if (docType == 'apex'){
              view = new Ockley.ApexDocListItem({ model: doc });
              editMode = 'apex';
            }
            else if (docType == 'vf') {
              view = new Ockley.VisualforceDocListItem({ model: doc});
              editMode = 'text/html';
            }
            container.append(view.render().el);

            view = new Ockley.EditorView({
                model: doc,
                mode: editMode,
                'tabs': tabs,
                'eventsMgr': eventsMgr
            });
        }

        //This returns an event handler for the various doc event bindings.
        //See above where we bind apexDocs and vfDocs
       function getDocEventHandler(eventName, docType, docListContainer){
            return function(d){

                log(docType + ' - ' + eventName);
                
                //add a doclistitem into the document accordion
                //and create a new editor view (not rendered) by calling addDoc.
                //Do it for the doc or docs (if is an array)
                if (d.hasOwnProperty('models')){
                    d.each(function(doc){ addDoc(doc, docType, docListContainer) } );
                 }
                 else {
                    addDoc(d, docType, docListContainer); 
                }
            }
        }

        function checkDeployStatus(deployId, options){
            return function(){

                log('checkDeployStatus for ' + deployId);

                var url = '/deploystatus/' + deployId + '.json';

                $.getJSON(url, function(data){
                    log('deploy status: ');
                    log(data);

                    var result = Ockley.getSfResult(data);
                    if (result.success){
                        if (!result.done){
                            setTimeout(checkDeployStatus(deployId), 2000);
                            return;
                        }
                    }
                    setTimeout(checkDeployResult(deployId, options), 500);
                });
            };
        }

        function checkDeployResult(deployId, options){
            return function(){

                log('checkDeployResult for ' + deployId);

                var url = '/deployresult/' + deployId + '.json';

                $.getJSON(url, function(data){
                    log('deploy result: ');
                    log(data);

                    var result = Ockley.getSfResult(data);
                    if (result.success){
                        if (options.hasOwnProperty('success')){
                          options.success.apply(this, [result]);
                        }
                    }
                    else{
                        if (options.hasOwnProperty('error')){
                          options.error.apply(this, [result]);
                        }
                    }
                });
            };
        }
        
    });
</script>        
